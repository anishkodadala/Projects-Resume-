# -*- coding: utf-8 -*-
"""Pneumonia disease detection using RESNET50.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X3_D0BceUopEG0JNMCCgRWEn9SHx7X_E
"""

# Import necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint
from google.colab import drive  # Google Drive integration

# Mount Google Drive to access files
drive.mount('/content/drive')

# Load the ResNet50 model pre-trained on ImageNet without the top layer
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the base model layers so they are not trained
for layer in base_model.layers:
    layer.trainable = False

# Build the full model
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dense(1024, activation='relu'),
    Dense(1, activation='sigmoid')  # Sigmoid activation for binary classification
])

# Compile the model
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# Prepare data generators
train_datagen = ImageDataGenerator(
    rescale=1./255,  # Rescale pixel values to [0, 1]
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)  # Only rescaling for test data

# Set up directories for training and testing data
train_dir = '/content/drive/MyDrive/archive (3)/chest_xray/train'  # Replace with your correct path
test_dir = '/content/drive/MyDrive/archive (3)/chest_xray/test'    # Replace with your correct path

# Create data generators
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'  # Binary classification
)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

# Model Checkpoint to save the best model during training
checkpoint = ModelCheckpoint(
    '/content/drive/MyDrive/archive (3)/chest_xray/pneumonia_model.keras',  # Use .keras extension
    save_best_only=True,
    monitor='val_loss',
    mode='min'
)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=5,
    validation_data=test_generator,
    validation_steps=test_generator.samples // test_generator.batch_size,
    callbacks=[checkpoint]
)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(test_generator)
print(f'Test Accuracy: {accuracy * 100:.2f}%')

# Save the trained model explicitly in .h5 format for compatibility
model.save('/content/drive/MyDrive/archive (3)/chest_xray/pneumonia_detection_model.h5')

# Add performance metrics visualization
import matplotlib.pyplot as plt

# Plot accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Accuracy vs. Epochs')
plt.show()

# Plot loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.title('Loss vs. Epochs')
plt.show()

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

# Define a function to predict and visualize a single image
def predict_and_visualize(image_path, model):
    """
    Predict whether an image contains pneumonia or not and display the image with the result.
    Args:
        image_path (str): Path to the image file.
        model: Trained Keras model.
    """
    # Load the image with target size (224, 224)
    img = load_img(image_path, target_size=(224, 224))
    # Convert the image to a numpy array for prediction
    img_array = img_to_array(img)
    img_array_expanded = np.expand_dims(img_array, axis=0)
    # Rescale pixel values to [0, 1]
    img_array_expanded = img_array_expanded / 255.0
    # Predict using the model
    prediction = model.predict(img_array_expanded)
    # Convert prediction to label and probability
    label = 'Pneumonia' if prediction[0][0] > 0.5 else 'Normal'
    probability = prediction[0][0] if prediction[0][0] > 0.5 else 1 - prediction[0][0]

    # Convert PIL image to a NumPy array for display
    img_np = np.array(img)
    # Display the image with prediction and probability
    plt.figure(figsize=(6, 6))
    plt.imshow(img_np.astype('uint8'))  # Convert to integer type for display
    plt.axis('off')
    plt.title(f"Prediction: {label}\nProbability: {probability:.2f}", fontsize=16)
    plt.show()

# Provide the path to the image you want to predict
image_path = '/content/drive/MyDrive/archive (3)/chest_xray/test/PNEUMONIA/BACTERIA-1135262-0001.jpeg'  # Replace with the actual image path

# Predict and visualize the given image
predict_and_visualize(image_path, model)